#include <bits/stdc++.h>

using namespace std;

class Account
{
private:
	string name;
	vector<string> transaction_history;
	string address;
	int account_number;
	int balance;

public:
	Account(string name, string address, int account_number, int initial_deposit)
		: name(name), address(address), account_number(account_number), balance(initial_deposit)
	{
		transaction_history.push_back("Account created with initial deposit: " + to_string(initial_deposit));
	}

	void deposit(int amount)
	{
		balance += amount;
		transaction_history.push_back("Deposited: " + to_string(amount) + ", New balance: " + to_string(balance));
	}

	void withdraw(int amount)
	{
		if (amount > balance)
		{
			cout << "Sorry, you do not have sufficient funds to complete this action." << endl;
			transaction_history.push_back("Failed withdrawal attempt: " + to_string(amount));
		}
		else
		{
			balance -= amount;
			transaction_history.push_back("Withdrew: " + to_string(amount) + ", Remaining balance: " + to_string(balance));
		}
	}

	void display_transaction_history() const
	{
		cout << "Transaction history for account: " << account_number << endl;
		for (const auto &entry : transaction_history)
		{
			cout << "  " << entry << endl;
		}
	}

	void display_account_info() const
	{
		cout << "Account information for account number " << account_number << endl;
		cout << "  Name: " << name << endl;
		cout << "  Address: " << address << endl;
		cout << "  Balance: " << balance << endl;
	}

	int get_balance() const { return balance; }
	int get_account_number() const { return account_number; }
};

class Bank
{
private:
	vector<Account> accounts;
	int next_account_number = 1;

public:
	void create_account(string name, string address, int initial_deposit)
	{
		accounts.emplace_back(name, address, next_account_number++, initial_deposit);
		cout << "Account created successfully! Your account number is: " << next_account_number - 1 << endl;
	}

	void deposit(int account_number, int amount)
	{
			for (auto &account : accounts)
		{
			if (account.get_account_number() == account_number)
			{
				account.deposit(amount);
				cout << "Deposit successful!" << endl;
				return;
			}
		}
		cout << "Account not found!" << endl;
	}

	void withdraw(int account_number, int amount)
	{
		for (auto &account : accounts)
		{
			if (account.get_account_number() == account_number)
			{
				account.withdraw(amount);
				return;
			}
		}
		cout << "Account not found!" << endl;
	}

	void check_balance(int account_number)
	{
		for (const auto &account : accounts)
		{
			if (account.get_account_number() == account_number)
			{
				cout << "Your balance is: " << account.get_balance() << endl;
				return;
			}
		}
		cout << "Account not found!" << endl;
	}

	void close_account(int account_number)
	{
		for (size_t i = 0; i < accounts.size(); ++i) {
			    if (accounts[i].get_account_number() == account_number) {
				    accounts.erase(accounts.begin() + i);
				    cout << "Account successfully closed." << endl;
				    return; 
			    } 
	       	}  cout << "Account not found!" << endl;

		}

	void display_account_info(int account_number)
	{
		for (const auto &account : accounts)
		{
			if (account.get_account_number() == account_number)
			{
				account.display_account_info();
				return;
			}
		}
		cout << "Account not found!" << endl;
	}

	void display_transaction_history(int account_number)
	{
		for (const auto &account : accounts)
		{
			if (account.get_account_number() == account_number)
			{
				account.display_transaction_history();
				return;
			}
		}
		cout << "Account not found!" << endl;
	}
};

void display_menu()
{
	cout << "Welcome to the SU Banking System. Please choose an option:\n";
	cout << "1. Create an account\n";
	cout << "2. Deposit money\n";
	cout << "3. Withdraw money\n";
	cout << "4. Check balance\n";
	cout << "5. Close an account\n";
	cout << "6. Display account information\n";
	cout << "7. Display transaction history\n";
	cout << "8. Exit the program\n";
}

int main()
{
	Bank bank;
	int choice;

	while (true)
	{
		display_menu();
		cin >> choice;

		switch (choice)
		{
		case 1:
		{
			string name, address;
			int initial_deposit;
			cout << "Enter the name of the client: ";
			cin >> name;
			cout << "Enter the address of the client: ";
			cin >> address;
			cout << "Enter the initial deposit: ";
			cin >> initial_deposit;
			bank.create_account(name, address, initial_deposit);
			break;
		}
		case 2:
		{
			int account_number, amount;
			cout << "Enter your account number: ";
			cin >> account_number;
			cout << "Enter the amount to deposit: ";
			cin >> amount;
			bank.deposit(account_number, amount);
			break;
		}
		case 3:
		{
			int account_number, amount;
			cout << "Enter your account number: ";
			cin >> account_number;
			cout << "Enter the amount to withdraw: ";
			cin >> amount;
			bank.withdraw(account_number, amount);
			break;
		}
		case 4:
		{
			int account_number;
			cout << "Enter your account number: ";
			cin >> account_number;
			bank.check_balance(account_number);
			break;
		}
		case 5:
		{
			int account_number;
			cout << "Enter your account number: ";
			cin >> account_number;
			bank.close_account(account_number);
			break;
		}
		case 6:
		{
			int account_number;
			cout << "Enter your account number: ";
			cin >> account_number;
			bank.display_account_info(account_number);
			break;
		}
		case 7:
		{
			int account_number;
			cout << "Enter your account number: ";
			cin >> account_number;
			bank.display_transaction_history(account_number);
			break;
		}
		case 8:
			cout << "Thank you for using the SU Banking System. Goodbye!" << endl;
			return 0;
		default:
			cout << "Invalid choice! Please try again." << endl;
		}
	}
}
